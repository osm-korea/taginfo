<%
    osm = @trans.t.osm
    misc = @trans.t.misc
    taginfo = @trans.t.taginfo
    page = @trans.t.pages.relation
 %>
var create_flexigrid_for = {
    overview: function(rtype) {
        create_flexigrid('grid-overview', {
            url: '/api/4/relation/stats?rtype=' + encodeURIComponent(rtype),
            colModel: [
                { display: '<%= h(page.overview.member_type) %>', name: 'type', width: 100, sortable: true },
                { display: '<%= h(page.overview.member_count) %>', name: 'count', width: 260, sortable: true, align: 'right' }
            ],
            usepager: false,
            useRp: false,
            preProcess: function(data) {
                return {
                    total: 4,
                    page: 1,
                    rows: data.data.map(function(row) {
                        return { 'cell': [
                            fmt_type_image(row.type),
                            fmt_with_ts(row.count)
                        ]};
                    })
                };
            }
        });
    },
    roles: function(rtype) {
        create_flexigrid('grid-roles', {
            url: '/api/4/relation/roles?rtype=' + encodeURIComponent(rtype),
            colModel: [
                { display: '<%= h(osm.relation_member_role) %>', name: 'role', width: 250, sortable: true },
                { display: '<span title="<%= h(page.roles.objects_tooltip) %>"><img src="/img/types/all.svg" width="16" height="16" alt=""/> <%= h(osm.relation_members) %></span>', name: 'count_all_members', width: 250, sortable: true, align: 'center' },
                { display: '<span title="<%= h(page.roles.nodes_tooltip) %>"><img src="/img/types/node.svg" width="16" height="16" alt=""/> <%= h(osm.relation_member_nodes) %></span>', name: 'count_node_members', width: 250, sortable: true, align: 'center' },
                { display: '<span title="<%= h(page.roles.ways_tooltip) %>"><img src="/img/types/way.svg" width="16" height="16" alt=""/> <%= h(osm.relation_member_ways) %></span>', name: 'count_way_members', width: 250, sortable: true, align: 'center' },
                { display: '<span title="<%= h(page.roles.relations_tooltip) %>"><img src="/img/types/relation.svg" width="16" height="16" alt=""/> <%= h(osm.relation_member_relations) %></span>', name: 'count_relation_members', width: 250, sortable: true, align: 'center' },
            ],
            searchitems: [
                { display: '<%= h(osm.relation_member_role) %>', name: 'role' }
            ],
            sortname: 'count_all_members',
            sortorder: 'desc',
            preProcess: function(data) {
                data.rows = data.data.map(function(row) {
                    return { 'cell': [
                        fmt_role(row.role),
                        fmt_value_with_percent(row.count_all_members, row.count_all_members_fraction),
                        fmt_value_with_percent(row.count_node_members, row.count_node_members_fraction),
                        fmt_value_with_percent(row.count_way_members, row.count_way_members_fraction),
                        fmt_value_with_percent(row.count_relation_members, row.count_relation_members_fraction)
                    ] };
                });
                return data;
            }
        });
    },
    wiki: function(rtype) {
        create_flexigrid('grid-wiki', {
            url: '/api/4/relation/wiki_pages?rtype=' + encodeURIComponent(rtype),
            colModel: [
                { display: '<%= h(misc.language) %>', name: 'lang', width: 150, sortable: false },
                { display: '<%= h(page.wiki_pages.wiki_page) %>', name: 'title', width: 160, sortable: false, align: 'right' },
                { display: '<%= h(misc.description) %>', name: 'description', width: 500, sortable: false },
                { display: '<%= h(misc.image) %>', name: 'image', width: 300, sortable: false }
            ],
            usepager: false,
            useRp: false,
            preProcess: function(data) {
                return {
                    total: data.total,
                    page: 1,
                    rows: data.data.map(function(row) {
                        return { 'cell': [
                            fmt_language(row.lang, row.dir, row.language, row.language_en),
                            link_to_wiki(row.title),
                            fmt_desc(row.lang, row.dir, row.description),
                            fmt_wiki_image_popup(row.image)
                        ]};
                    })
                };
            }
        });
    },
    projects: function(rtype) {
        create_flexigrid('grid-projects', {
            url: '/api/4/relation/projects?rtype=' + encodeURIComponent(rtype),
            colModel: [
                { display: '<%= h(taginfo.project) %>', name: 'project_name', width: 280, sortable: true },
                { display: '<%= h(page.projects.description) %>', name: 'description', width: 600, sortable: false, align: 'left' }
            ],
            searchitems: [
                { display: '<%= h(taginfo.project) %>/<%= h(osm.value) %>', name: 'project_value' }
            ],
            sortname: 'project_name',
            sortorder: 'asc',
            preProcess: function(data) {
                data.rows = data.data.map(function(row) {
                    return { 'cell': [
                        link_to_project(row.project_id, row.project_name, row.project_icon_url),
                        project_tag_desc(row.description, row.icon_url, row.doc_url)
                    ] };
                });
                return data;
            }
        });
    },
    characters: function(key, filter_type) {
        return create_characters_flexigrid(key);
    }
};

function create_role_chart(roles) {
    if (roles.total == 0) {
        return;
    }

    let data = [];
    roles.data.forEach(function(r) {
        ['node', 'way', 'relation'].forEach(function(type) {
            const count = r['count_' + type + '_members'];

            let title = '' + count + ' member ' + type + 's with ';
            let label;
            if (r.role === null) {
                title += "other roles";
                label = '...';
            } else {
                title += "role '" + r.role + "'";
                label = r.role == '' ? '(empty)' : r.role;
            }

            data.push({
                role: r.role,
                type: type + 's',
                value: count,
                label: label,
                title: title
            });
        });
    });

    const width = 800;
    const height = 360;
    const margin = 20;

    const x = d3.scaleLinear().range([0, width  - 2 * margin]);
    const y = d3.scaleLinear().range([0, height - 2 * margin]);

    const color = d3.scaleOrdinal(d3.schemeCategory10);

    const percent = d3.format('~%');

    const svg = d3.select('div.canvas').append('svg')
        .attr('width', width + 20)
        .attr('height', height)
        .append('g')
            .attr('transform', "translate(" + 2 * margin + "," + margin + ")");

    const root = d3.hierarchy(d3.group(data, d => d.type, d => d.role));

    const treemap = d3.treemap()
        .round(true)
        .tile(d3.treemapSliceDice)
        .size([width - 2 * margin, height - 2 * margin]);

    treemap(root.sum(d => d.value));

    svg.selectAll('.role')
        .data(root.leaves())
            .enter().append('a')
                .attr('class', 'role')
                .style('text-decoration', 'none')
                .attr("xlink:title", d => d.data.title)
                .call(function(c) {
                    c.append("rect")
                        .attr('x', d => d.x0)
                        .attr('y', d => d.y0)
                        .attr('width', d => d.x1 - d.x0)
                        .attr('height', d => d.y1 - d.y0)
                        .style("fill", d => color(d.data.role));
                    c.append("text")
                        .attr("x", d => d.x0 + (d.x1 - d.x0) / 2)
                        .attr("y", d => d.y0 + (d.y1 - d.y0) / 2)
                        .attr("dy", 4)
                        .attr("text-anchor", "middle")
                        .style("fill", "#fff")
                        .text(function(d) {
                            if (d.x1 - d.x0 > 40 && d.y1 - d.y0 > 10) {
                                return d.data.label;
                            } else {
                                return '';
                            }
                        });
                });

    // Add x-axis ticks.
    const xtick = svg.selectAll(".x")
        .data(x.ticks(10))
        .enter().append("g")
            .attr("class", "x")
            .attr("transform", function(d) { return "translate(" + x(d) + "," + y(1) + ")"; });

    xtick.append("line")
        .attr("y2", 6)
        .style("stroke", "#000");

    xtick.append("text")
        .attr("y", 8)
        .attr("text-anchor", "middle")
        .attr("dy", ".71em")
        .text(percent);

    // Add y-axis ticks.
    const ytick = svg.selectAll(".y")
        .data(y.ticks(10))
        .enter().append("g")
            .attr("class", "y")
            .attr("transform", function(d) { return "translate(0," + y(1 - d) + ")"; });

    ytick.append("line")
        .attr("x1", -6)
        .style("stroke", "#000");

    ytick.append("text")
        .attr("x", -8)
        .attr("text-anchor", "end")
        .attr("dy", ".35em")
        .text(percent);

    // Add a group for each member type.
    const member_types_svg = svg.selectAll(".member_types")
        .data(root.children)
        .enter().append("g")
            .attr("class", "member_types")
            .attr("transform", d => 'translate(' + d.x0 + ', -6)')
            .call(function(c) {
                c.append("line")
                    .attr("x1", 0)
                    .attr("y1", -3.7)
                    .attr("x2", d => d.x1 - d.x0 )
                    .attr("y2", -3.7)
                    .style("stroke", "#000");
                c.append("text")
                    .attr("x", 0)
                    .attr("text-anchor", "start")
                    .text(d => (d.x1 - d.x0) > 10 ? '<' : '');
                c.append("text")
                    .attr("x", d => d.x1 - d.x0 )
                    .attr("text-anchor", "end")
                    .text(d => (d.x1 - d.x0) > 10 ? '>' : '');
                c.append("text")
                    .attr("x", d => (d.x1 - d.x0) / 2 )
                    .attr("text-anchor", "middle")
                    .style("stroke", "#ddddd4")
                    .style("stroke-width", 4)
                    .style("fill", "#000")
                    .text(d => (d.x1 - d.x0) > 40 ? texts.osm[d.data[0]] : '');
                c.append("text")
                    .attr("x", d => (d.x1 - d.x0) / 2 )
                    .attr("text-anchor", "middle")
                    .style("fill", "#000")
                    .text(d => (d.x1 - d.x0) > 40 ? texts.osm[d.data[0]] : '');
            });

}

function page_init() {
    up = function() { window.location = '/relations'; };
    activate_josm_button();

    const h1 = document.querySelector('h1');
    const rtype = h1.dataset.rtype;
    h1.innerHTML += fmt_rtype(rtype);
    set_inner_html_to('taglink', link_to_value('type', rtype));
    init_tabs([rtype]);

    fetch('/api/4/relation/roles?sortname=count_all_members&sortorder=asc&min_fraction=0.01&rtype=' + encodeURIComponent(rtype)).
        then(response => response.json()).
        then(roles => create_role_chart(roles));
}
