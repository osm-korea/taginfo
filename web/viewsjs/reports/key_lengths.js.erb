<%
    osm = @trans.t.osm
    misc = @trans.t.misc
    page = @trans.t.reports.key_lengths
 %>
var create_flexigrid_for = {
    keys: function() {
        create_flexigrid('grid-keys', {
            url: '/api/4/keys/all?include=prevalent_values',
            colModel: [
                { display: '<%= h(misc.length) %>', name: 'length', width: 60, sortable: true, align: 'right' },
                { display: '<%= h(osm.key) %>', name: 'key', width: 180, sortable: true },
                { display: '<span title="<%= h(misc.objects_tooltip) %>"><img src="/img/types/all.svg" width="16" height="16" alt=""/> <%= h(osm.objects) %></span>', name: 'count_all', width: 200, sortable: true, align: 'center' },
                { display: '<span title="<%= h(misc.in_wiki_tooltip) %>">Wiki</span>', name: 'in_wiki', width: 20, sortable: true, align: 'center' },
                { display: '<span title="<%= h(misc.values_tooltip) %>"><%= h(osm.values) %></span>', name: 'values_all', width: 70, sortable: true, align: 'right' },
                { display: '<span title="<%= h(misc.prevalent_values_tooltip) %>"><%= h(misc.prevalent_values) %></span>', name: 'prevalent_values', width: 550, sortable: true }
            ],
            searchitems: [
                { display: '<%= h(osm.key) %>', name: 'key' }
            ],
            sortname: 'length',
            sortorder: 'asc',
            preProcess: function(data) {
                data.rows = data.data.map(function(row) {
                    return { 'cell': [
                        row.key.length,
                        link_to_key(row.key),
                        fmt_value_with_percent(row.count_all, row.count_all_fraction),
                        link_to_key_with_tab(row.key, 'wiki', fmt_checkmark(row.in_wiki)),
                        fmt_with_ts(row.values_all),
                        fmt_prevalent_value_list(row.key, row.prevalent_values)
                    ] };
                });
                return data;
            }
        });
    }
};

<%
hist = Array.new
@db.execute('SELECT length(key) AS length, count(*) AS count FROM db.keys GROUP BY length(key) ORDER BY length(key)') do |row|
    hist[row['length'].to_i] = row['count'].to_i
end
hist = hist.map{ |item| item.nil? ? 0 : item } %>

function page_init() {
    up = function() { window.location = '/reports'; };
    init_tabs([]);

    var bar_width = 6,
        bar_skip = 2,
        bar_step = bar_width + bar_skip,
        data = <%= hist.to_json %>,
        w = bar_step * data.length,
        h = Math.min(400, $('#tabs').height() - 160),
        margin = { top: 10, right: 15, bottom: 60, left: 60 };

    var scale_y = d3.scaleLinear()
                    .domain([0, <%= hist.max %>])
                    .range([h, 0]);

    var chart = d3.select('#canvas-histogram').append('svg')
                    .attr('width', w + margin.left + margin.right)
                    .attr('height', h + margin.top + margin.bottom)
                    .append('g')
                        .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')')
                        .call(function(c) {
                            c.append('rect')
                                .attr('width', w)
                                .attr('height', h + 10)
                                .attr('y', -5)
                                .style('fill', 'white')
                                .style('stroke', '#d0d0c8')
                        });

    chart.append('g')
        .attr('class', 'x axis')
        .attr('transform', 'translate(0, ' + (h + 10) + ')')
        .append('text')
            .attr('x', w/2)
            .attr('y', 36)
            .style('text-anchor', 'middle')
            .text('<%= page.histogram.key_length %>');

    chart.append('g')
        .attr('class', 'y axis')
        .style('fill', 'black')
        .call(d3.axisLeft(scale_y))
        .append('text')
            .attr('transform', 'rotate(-90)')
            .attr('x', -h/2)
            .attr('y', -50)
            .style('text-anchor', 'middle')
            .text('<%= page.histogram.number_of_keys %>');

    chart.selectAll('rect')
        .data(data)
        .enter()
        .append('g')
            .call(function(c) {
                c.append('g')
                    .attr('transform', function(d, i) { return 'translate(' + (i * bar_step + bar_step/2) + ', ' + (h+10) + ')';})
                    .style('display', function(d, i) { return i == 1 || i % 10 == 0 ? '' : 'none'; })
                    .call(function(t) {
                        t.append('text')
                            .attr('y', 16)
                            .style('text-anchor', 'middle')
                            .text((d, i) => i)
                    })
                    .append('line')
                        .style('stroke', 'black')
                        .style('shape-rendering', 'crispEdges')
                        .attr('y2', 6);
            })
        .append('rect')
            .style('fill', '#083e76')
            .attr('x', (d, i) => i * bar_step)
            .attr('y', d => scale_y(d))
            .attr('width', bar_width)
            .attr('height', d => h - scale_y(d))
            .attr('title', (d, i) => '' + d + ' keys of length ' + i);

}
