<%
    osm = @trans.t.osm
    misc = @trans.t.misc
 %>
function tt(text, c, title) {
    return tag('tt', text, { 'class': c, 'title': title, 'tipsy': 'w' });
}

var create_flexigrid_for = {
    "overview": function() {
        create_flexigrid('grid-name', {
            url: '/api/0/keys/name',
            colModel: [
                { display: '<%= h(osm.key) %>', name: 'key', width: 250, sortable: true },
                { display: '<%= h(osm.objects) %>', name: 'count_all', width: 100, sortable: true, align: 'right' },
                { display: '<span title="<%= h(misc.in_wiki_tooltip) %>">Wiki</span>', name: 'in_wiki', width: 20, sortable: true, align: 'center' },
                { display: 'Prefix', name: 'prefix', width: 100, sortable: true },
                { display: 'Type', name: 'type', width: 100, sortable: true },
                { display: 'Langtag', name: 'langtag', width: 100, sortable: true },
                { display: 'Language', name: 'lang', width: 100, sortable: true },
                { display: 'Script', name: 'script', width: 100, sortable: true },
                { display: 'Region', name: 'region', width: 100, sortable: true },
                { display: 'Notes', name: 'notes', width: 500, sortable: true }
            ],
            searchitems: [
                { display: '<%= h(osm.key) %>', name: 'key' }
            ],
            sortname: 'count_all',
            sortorder: 'desc',
            preProcess: function(data) {
                data.rows = data.data.map(function(row) {
                    return { 'cell': [
                        link_to_key(row.key),
                        fmt_with_ts(row.count_all),
                        link_to_key_with_tab(row.key, 'wiki', fmt_checkmark(row.in_wiki)),
                        row.prefix,
                        row.type,
                        row.langtag,
                        tt(row.lang, row.lang_state, row.lang_note),
                        tt(row.script, row.script_state, row.script_note),
                        row.region,
                        row.notes
                    ] };
                });
                return data;
            }
        });
    },
    "bcp47": function() {
        const filter_type = document.getElementById('subtag-filter').value;
        create_flexigrid('grid-bcp47-subtags', {
            url: '/api/0/langtags?filter=' + encodeURIComponent(filter_type),
            colModel: [
                { display: 'Type',        name: 'type',        width:  80, sortable: false },
                { display: 'Subtag',      name: 'subtag',      width:  80, sortable: true },
                { display: 'Description', name: 'description', width: 500, sortable: true },
                { display: 'Added',       name: 'added',       width:  80, sortable: true },
                { display: 'Notes',       name: 'notes',       width: 400, sortable: false }
            ],
            searchitems: [
                { display: 'Subtag or description', name: 'text' }
            ],
            sortname: 'subtag',
            sortorder: 'asc',
            preProcess: function(data) {
                data.rows = data.data.map(function(row) {
                    return { 'cell': [
                        row.type,
                        tag('tt', row.subtag),
                        row.description,
                        row.added,
                        row.notes
                    ] };
                });
                return data;
            }
        });
    }
};

function page_init() {
    up = function() { window.location = '/reports'; };
    const filter = document.getElementById('subtag-filter');
    filter.addEventListener('change', function(element) {
        window.location.search = new URLSearchParams({ 'filter': element.target.value });
    });
    init_tabs([]);
}
